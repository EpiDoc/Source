<?xml version="1.0" encoding="UTF-8"?>
<!-- ============================================================================= -->
<!--   EPIDOC GUIDELINES MAIN SITEMAP - FOR USE WITH EPIDOC WEBAPP                 -->
<!-- ============================================================================= -->
<map:sitemap xmlns:map="http://apache.org/cocoon/sitemap/1.0">
    <map:components>
        <map:generators default="file">
            <map:generator name="request" src="org.apache.cocoon.generation.RequestGenerator">
                <map:parameter name="generate-attributes" value="true"/>
            </map:generator>
        </map:generators>
        <map:transformers default="xslt">
            <map:transformer name="xslt-saxon" src="org.apache.cocoon.transformation.TraxTransformer">
                <xslt-processor-role>saxon</xslt-processor-role>
            </map:transformer>
            <map:transformer name="cinclude" src="org.apache.cocoon.transformation.CIncludeTransformer"/>
            <map:transformer name="xinclude" src="org.apache.cocoon.transformation.XIncludeTransformer"/>
        </map:transformers>
        <map:readers default="resource"/>
        <map:serializers default="xhtmlbasic">
            <!-- note that the default serializer is our locally defined xhtmlbasic, not the standard cocoon xml serializer -->
            <map:serializer mime-type="application/xhtml+xml" name="xhtmlbasic" src="org.apache.cocoon.serialization.XMLSerializer">
                <!-- provide configuration for serializing XHTML with the proper doctype, encoding and suppressed indention -->
                <doctype-public>-//W3C//DTD XHTML 1.0 Strict//EN</doctype-public>
                <doctype-system>http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd</doctype-system>
                <encoding>UTF-8</encoding>
                <indent>no</indent>
            </map:serializer>
            <map:serializer logger="sitemap.serializer.html" mime-type="text/html" name="html" pool-max="32"
                src="org.apache.cocoon.serialization.HTMLSerializer">
                <doctype-public>-//W3C//DTD HTML 4.01 Transitional//EN</doctype-public>
                <doctype-system>http://www.w3.org/TR/html4/loose.dtd</doctype-system>
                <encoding>UTF-8</encoding>
            </map:serializer>
            <map:serializer mime-type="text/xml" name="xml" src="org.apache.cocoon.serialization.XMLSerializer">
                <!-- force xml serialization to use UTF8 and to leave indent alone -->
                <encoding>UTF-8</encoding>
                <indent>no</indent>
            </map:serializer>
            <map:serializer mime-type="text/xml" name="xmlepidoc" src="org.apache.cocoon.serialization.XMLSerializer">
                <!-- provide a means for serializing epidoc documents with a doctype pointing at the epidoc dtd -->
                <doctype-system>tei-epidoc.dtd</doctype-system>
                <encoding>UTF-8</encoding>
                <indent>no</indent>
            </map:serializer>
        </map:serializers>
        <map:selectors default="browser">
          <map:selector name="browser"
           src="org.apache.cocoon.selection.BrowserSelector">
          <browser name="explorer" useragent="MSIE"/>
          <browser name="netscape" useragent="Mozilla"/>
         </map:selector>
        </map:selectors>
        <map:matchers default="wildcard"/>
    </map:components>
    <!-- ============================================================================= -->
    <!--   PIPELINES                                                                                                                    -->
    <!-- ============================================================================= -->
    <map:pipelines>
        <map:pipeline internal-only="true">
            <!-- a thousand thankyous to Hugh Cayless, whose guidance lit the way to this pipeline. TRE -->
            <!-- We check first in an 'xsl' directory subordinate to the current working directory (i.e., prj). If
                  the file we're seeking is not found there, then we look in three other places corresponding to
                  possible deployment patterns. For details, see the README.TXT file in the epidoc-webapp
                  module. -->
            <map:match pattern="*/*.xsl">
                <map:select type="resource-exists">
                    <map:when test="xsl/{1}/{2}.xsl">
                        <map:generate src="xsl/{1}/{2}.xsl"/>
                    </map:when>
                    <map:when test="../../xsl/epidoc-xsl/{1}/{2}.xsl">
                        <map:generate src="../../xsl/epidoc-xsl/{1}/{2}.xsl"/>
                    </map:when>
                    <map:when test="../../../epidoc-xsl/{1}/{2}.xsl">
                        <map:generate src="../../../epidoc-xsl/{1}/{2}.xsl"/>
                    </map:when>
                    <map:otherwise>
                        <map:generate src="../epidoc-xsl/{1}/{2}.xsl"/>
                    </map:otherwise>
                </map:select>
                <map:serialize type="xml"/>
            </map:match>
            <map:match pattern="toc">
                <map:generate src="src/guidelines.xml"/>
                <map:transform type="xinclude"/>
                <map:transform src="cocoon:/html/epidoc.xsl">
                    <map:parameter name="dotitlepage" value="yes"/>
                </map:transform>
                <map:transform src="cocoon:/util/xhtmlindenter.xsl"/>
                <!-- serializes output according to browser used: uses dumb html for dumb MSIE -->
                    <map:select type="browser">
                       <map:when test="explorer">
                        <map:serialize type="html" />
                      </map:when>
                      <map:otherwise>
                        <map:serialize type="xhtmlbasic" />
                      </map:otherwise>
                    </map:select>
            </map:match>
        </map:pipeline>
        <map:pipeline name="tests" internal-only="true">
            <map:match pattern="*/*.sch">
                <map:generate src="{1}/{2}.sch"/>
                <map:transform type="xslt-saxon" src="{1}/schematron-report.xsl"/>
                <map:serialize type="xml"/>
            </map:match>
        </map:pipeline>
        <map:pipeline name="projectcontent">
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <!--   multiple ways to get the title page -->
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <map:match pattern="">
                <!-- Redirect request to the root path to the index page -->
                <map:redirect-to uri="index.html"/>
<!-- Redirecting to index.html to solve the problem some browsers have when no filename is specified.
    
    <map:generate src="src/guidelines.xml"/>
                <map:transform type="xinclude"/>
                <map:transform src="cocoon:/html/epidoc.xsl">
                    <map:parameter name="dotitlepage" value="yes"/>
                </map:transform>
                <map:transform src="cocoon:/util/xhtmlindenter.xsl"/>
                <map:serialize type="xhtmlbasic"/>-->
            </map:match>
            <map:match pattern="guidelines.html">
                <!-- Redirect request to the root path to the index page -->
                <map:redirect-to uri="index.html"/>
                <!--
                <map:generate src="src/guidelines.xml"/>
                <map:transform type="xinclude"/>
                <map:transform src="cocoon:/html/epidoc.xsl">
                    <map:parameter name="dotitlepage" value="yes"/>
                </map:transform>
                <map:transform src="cocoon:/util/xhtmlindenter.xsl"/>
                <map:serialize type="xhtmlbasic"/>-->
            </map:match>
            <map:match pattern="index.html">
                <map:generate src="src/guidelines.xml"/>
                <map:transform type="xinclude"/>
                <map:transform src="cocoon:/html/epidoc.xsl">
                    <map:parameter name="dotitlepage" value="yes"/>
                </map:transform>
                <map:transform src="cocoon:/util/xhtmlindenter.xsl"/>
                <!-- serializes output according to browser used: uses dumb html for dumb MSIE -->
                    <map:select type="browser">
                       <map:when test="explorer">
                        <map:serialize type="html" />
                      </map:when>
                      <map:otherwise>
                        <map:serialize type="xhtmlbasic" />
                      </map:otherwise>
                    </map:select>
            </map:match>
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <!--   dirlist.html                                                                                                                                                                       -->
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <map:match pattern="dirlist.html">
                <map:generate type="directory" src="./src">
                    <map:parameter name="exclude" value="CVS"/>
                </map:generate>
                <map:transform src="cocoon:/util/dir2tei.xsl">
                    <map:parameter name="dodirs" value="no"/>
                    <map:parameter name="dofiles" value="yes"/>
                    <map:parameter name="htmllink" value="yes"/>
                </map:transform>
                <map:transform src="cocoon:/html/epidoc.xsl"/>
                <map:transform src="cocoon:/util/xhtmlindenter.xsl"/>
                <!-- serializes output according to browser used: uses dumb html for dumb MSIE -->
                    <map:select type="browser">
                       <map:when test="explorer">
                        <map:serialize type="html" />
                      </map:when>
                      <map:otherwise>
                        <map:serialize type="xhtmlbasic" />
                      </map:otherwise>
                    </map:select>
            </map:match>
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <!--   *.html                                                                                                                                                -->
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

            <map:match pattern="tagref.html">
                <map:generate src="src/guidelines.xml"/>
                <map:transform type="xinclude"/>
                <map:transform src="cocoon:/util/tagrefprep.xsl"/>
                <map:transform src="cocoon:/html/tagref.xsl"/>
                <map:transform src="cocoon:/util/xhtmlindenter.xsl"/>
                <!-- serializes output according to browser used: uses dumb html for dumb MSIE -->
                    <map:select type="browser">
                       <map:when test="explorer">
                        <map:serialize type="html" />
                      </map:when>
                      <map:otherwise>
                        <map:serialize type="xhtmlbasic" />
                      </map:otherwise>
                    </map:select>
            </map:match>
            <map:match pattern="tagref.xml">
                <map:generate src="src/guidelines.xml"/>
                <map:transform type="xinclude"/>
                <map:transform src="cocoon:/util/tagrefprep.xsl"/>
                <map:transform src="cocoon:/util/teiindenter.xsl"/>
                <map:serialize type="xmlepidoc"/>
            </map:match>
            <map:match pattern="toc.html">
                <map:generate src="src/guidelines.xml"/>
                <map:transform type="xinclude"/>
                <map:transform src="cocoon:/html/sitemap.xsl"/>
                <map:transform src="cocoon:/util/xhtmlindenter.xsl"/>
                <!-- serializes output according to browser used: uses dumb html for dumb MSIE -->
                    <map:select type="browser">
                       <map:when test="explorer">
                        <map:serialize type="html" />
                      </map:when>
                      <map:otherwise>
                        <map:serialize type="xhtmlbasic" />
                      </map:otherwise>
                    </map:select>
            </map:match>

            <map:match pattern="*.html">
                <map:generate src="src/{1}.xml"/>
                <map:transform type="xinclude"/>
                <map:transform src="cocoon:/html/epidoc.xsl"/>
                <map:transform src="cocoon:/util/xhtmlindenter.xsl"/>
                <!-- serializes output according to browser used: uses dumb html for dumb MSIE -->
                    <map:select type="browser">
                       <map:when test="explorer">
                        <map:serialize type="html" />
                      </map:when>
                      <map:otherwise>
                        <map:serialize type="xhtmlbasic" />
                      </map:otherwise>
                    </map:select>
                <map:serialize type="xml"/>
            </map:match>
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <!--   *.xml                                                                                                                                                                       -->
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <map:match pattern="resp.xml">
                <map:generate src="src/guidelines.xml"/>
                <map:transform type="xinclude"/>
                <map:transform src="cocoon:/util/aggregatecontributors.xsl"/>
                <map:transform src="cocoon:/util/sortcontributors.xsl"/>
                <map:serialize type="xml"/>
            </map:match>

            <map:match pattern="guidelines.xml">
                <map:generate src="src/guidelines.xml"/>
                <map:transform type="xinclude"/>
                <map:transform src="cocoon:/util/teiindenter.xsl"/>
                <map:serialize type="xmlepidoc"/>
            </map:match>


            <map:match pattern="*.xml">
                <map:generate src="src/{1}.xml"/>
                <map:transform src="cocoon:/util/teiindenter.xsl"/>
                <map:serialize type="xmlepidoc"/>
            </map:match>

            <map:match pattern="*.inc">
                <map:generate src="src/{1}.xml"/>
                <map:transform type="xinclude"/>
                <!--<map:transform src="cocoon:/util/disambiguatedivids.xsl"/>-->
                <map:transform src="cocoon:/util/teiindenter.xsl"/>
                <map:serialize type="xmlepidoc"/>
            </map:match>
            <map:match pattern="guidelines.woo">
                <map:generate src="src/guidelines.xml"/>
                <map:transform type="xinclude"/>
                <map:transform src="cocoon:/util/attributes.xsl"/>
                <map:serialize type="text"/>
            </map:match>
            <map:match pattern="replacements.txt">
                <map:generate src="src/guidelines.xml"/>
                <map:transform type="xinclude"/>
                <!--                <map:transform src="cocoon:/util/disambiguatedivids.xsl"/> -->
                <map:transform src="cocoon:/util/replacements.xsl"/>
                <map:serialize type="text"/>
            </map:match>
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <!--   TESTS                                                                                                                                                -->
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <map:match pattern="*.test">
                <map:generate src="src/{1}.xml"/>
                <map:transform type="xinclude"/>
                <map:transform type="xslt-saxon" src="tests/preprocess.xsl"/>
                <map:transform type="xslt-saxon" src="cocoon:/tests/unittest.sch"/>
                <map:serialize type="html"/>
            </map:match>
            <map:match pattern="*.preprocess">
                <map:generate src="src/{1}.xml"/>
                <map:transform type="xinclude"/>
                <map:transform type="xslt-saxon" src="tests/preprocess.xsl"/>
                <map:serialize type="xml"/>
            </map:match>
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <!--   IMAGES                                                                                                                                                                   -->
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <map:match pattern="*.gif">
                <map:read mime-type="image/gif" src="img/{1}.gif"/>
            </map:match>
            <map:match pattern="*.jpg">
                <map:read mime-type="image/jpeg" src="img/{1}.jpg"/>
            </map:match>
            <map:match pattern="*.png">
                <map:read mime-type="image/png" src="img/{1}.png"/>
            </map:match>
            <!--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <!--   *.css                                                                                                                                                                        -->
            <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
            <map:match pattern="*.css">
                <map:select type="resource-exists">
                    <map:when test="css/{1}.css">
                        <!-- maybe this project defines its own css files -->
                        <map:read mime-type="text/css" src="css/{1}.css"/>
                    </map:when>
                    <map:when test="../../css/{1}.css">
                        <!-- maybe csss are installed at epidoc-webapp level and project is under prj -->
                        <map:read mime-type="text/css" src="../../css/{1}.css"/>
                    </map:when>
                    <map:when test="../../../epidoc-xsl/css/{1}.css">
                        <!-- developer configuration (standard xsls are installed in a work directory at same level as epidoc-webapp),
                         but project is in standard prj directory under webapp (e.g., examples) -->
                        <map:read mime-type="text/css" src="../../../epidoc-xsl/css/{1}.css"/>
                    </map:when>
                    <map:otherwise>
                        <!-- developer configuration (standard xsls are installed in a work directory at same level as epidoc-webapp),
                         and project is similarly parallel working directory -->
                        <map:read mime-type="text/css" src="../epidoc-xsl/css/{1}.css"/>
                    </map:otherwise>
                </map:select>
            </map:match>
        </map:pipeline>
    </map:pipelines>
</map:sitemap>
